using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Rendering;

public class PlayerMovement : MonoBehaviour
{
    [Header("Movement")]
    private float moveSpd;
    public float forceSpd = 10f;
    public float walkSpeed;
    public float sprintSpeed;
    public float slideSpeed;

    private float desiredMoveSpeed; // we are using this to implement momentum to our movement spd. 
    private float lastDesireMoveSpeed;

    public float speedIncreaseMultiplier;
    public float slopeIncreaseMultiplier;

    [Header("Slope Handling")]
    public float maxSlopeAngle;
    private RaycastHit slopeHit;
    private bool exitingSlope;


    public float groundDrag;

    [Header("Crouching")]
    public float crouchSpeed;
    public float crouchYScale;
    private float startYScale;

    [Header("Jumping")]
    public float jumpForce;
    public float jumpCooldown;
    public float airMultiplier;
    bool readyToJump;

    [Header("Keybinds")] //setup keybind for jump
    public KeyCode jumpKey = KeyCode.Space;
    public KeyCode sprintKey = KeyCode.LeftShift;
    public KeyCode crouchKey = KeyCode.LeftControl;

    [Header("Ground Check")]
    public float playerHeight;
    public LayerMask whatIsGround;
    bool grounded;


    public Transform orientation;

    float horizontalInput;
    float verticalInput;

    Vector3 moveDirection;

    Rigidbody rb;

    public MovementState state;

    public enum MovementState
    {
        walking,
        sprinting,
        air,
        sliding,
        crouching
    }

    public bool sliding;

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;

        readyToJump = true; // to allow to jump when you start the game. 

        startYScale = transform.localScale.y; // start scale of your player. 
    }
    // Update is called once per frame
    void Update()
    {
        //ground check
        grounded = Physics.Raycast(transform.position, Vector3.down, playerHeight * 0.5f + .2f, whatIsGround);

        MyInput();
        SpeedControl();
        StateHandler();

        //handle drag
        if (grounded)
            rb.drag = groundDrag;
        else
            rb.drag = 0;

        TextStuff();
    }

    private void FixedUpdate()
    {
        MovePlayer();
    }
    private void MyInput()
    {
        horizontalInput = Input.GetAxisRaw("Horizontal");
        verticalInput = Input.GetAxisRaw("Vertical");

        // when to jump
        if (Input.GetKey(jumpKey) && readyToJump && grounded)
        {
            readyToJump = false;

            Jump();

            Invoke(nameof(ResetJump), jumpCooldown); //this will reset the Cool down with delay.  You can continusly jump when you held down the key. 
        }

        //start crouch
        if (Input.GetKeyDown(crouchKey))
        {
            // this will alter the scale of our player, but only in the Y axis.  
            // However, this will change the Y scale at the center.  The player will be floating. add another fucktion with rb.
            transform.localScale = new Vector3(transform.localScale.x, crouchYScale, transform.localScale.z);
            rb.AddForce(Vector3.down * 5f, ForceMode.Impulse);
        }
        // Stop Crouch
        if (Input.GetKeyUp(crouchKey))
        {
            transform.localScale = new Vector3(transform.localScale.x, startYScale, transform.localScale.z);
        }

    }
    private void MovePlayer()
    {
        // calculate movement direction
        moveDirection = orientation.forward * verticalInput + orientation.right * horizontalInput;

        // on slope
        if (OnSlope() && !exitingSlope)
        {
            rb.AddForce(GetSlopeMoveDirection(moveDirection) * moveSpd * 20f, ForceMode.Force);

            if (rb.velocity.y > 0)
                rb.AddForce(Vector3.down * 80f, ForceMode.Force);
        }
                

        // on ground
        else if (grounded)
            rb.AddForce(moveDirection.normalized * moveSpd * forceSpd, ForceMode.Force);
         
        // in air
        else if (!grounded)
            rb.AddForce(moveDirection.normalized * moveSpd * forceSpd * airMultiplier, ForceMode.Force);

        // turn gravity off while on slope
        rb.useGravity = !OnSlope();
    }

    private void SpeedControl()
    {
        // limiting speed on the slope
        if (OnSlope() && !exitingSlope)
        {
            if (rb.velocity.magnitude > moveSpd)
                rb.velocity = rb.velocity.normalized * moveSpd;
        }
        // limiting speed on the ground and air
        else
        {
            Vector3 flatVel = new Vector3(rb.velocity.x, 0f, rb.velocity.z); // we creating data from the velocity from the rigid body force

            // limiting speed on the ground or in air

            // limit velocity if needed
            if (flatVel.magnitude > moveSpd) // if we are faster than our movement speed
            {
                Vector3 limitedVel = flatVel.normalized * moveSpd; //you calculate your max velocity would be   
                rb.velocity = new Vector3(limitedVel.x, rb.velocity.y, limitedVel.z); //then apply it

            }
        }
       

    }

    private void Jump()
    {
        exitingSlope = true;

        // reset y velocity to 0
        rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z);

        rb.AddForce(transform.up * jumpForce, ForceMode.Impulse); // applying the jump once.  I wonder we can set up double jump. 

    }
    private void ResetJump()
    {
        readyToJump = true; // allow to jump dur0ing update. 
        exitingSlope = false;
    }
    public bool OnSlope()  // are your player on the slope? 
    {
        if (Physics.Raycast(transform.position, Vector3.down, out slopeHit, playerHeight * 0.5f + 0.3f))
        {
            float angle = Vector3.Angle(Vector3.up, slopeHit.normal);
            return angle < maxSlopeAngle && angle != 0;
        }

        return false;
    }

    
    public Vector3 GetSlopeMoveDirection(Vector3 direction)  
        {
        return Vector3.ProjectOnPlane(direction, slopeHit.normal).normalized;
        }
    private void StateHandler()
    {
        // Mode - Sliding
        if (sliding)
        {
            state = MovementState.sliding;
            
            if (OnSlope() && rb.velocity.y < 0.1f)
                desiredMoveSpeed = slideSpeed;

            else desiredMoveSpeed = sprintSpeed;


        }
        // Mode - Crouching
        else if (Input.GetKey(crouchKey))
        {
            state = MovementState.crouching;
            desiredMoveSpeed = crouchSpeed;
        }
        // Mode - Sprinting
        if (grounded && Input.GetKey(sprintKey))
        {
            state = MovementState.sprinting;
            desiredMoveSpeed = sprintSpeed;
        }

        // Mode - Walking
        else if (grounded) {
            state = MovementState.walking;
            desiredMoveSpeed = walkSpeed;
        }
        
        // Mode - Air
        else 
        {
            state = MovementState.air;

        }

        //check if desdiredMoveSpeed has changed drastically
        // if you change walking to sprinting, the speed difference would be only (we say 3). the speed changes instantly.
        // But if you build up a speed of let's say 30 and you're changing to sprinting the difference is 20 which is greater than
        // 4 which means the speed will no slowy decrease.  
        //This way, we can have it both. we can keep up your momentum. 
        // NOTE THAT "4F" IS THE DIFFERENCE WE CAN SET UP BETWEEN WALK AND SPRINT SPEED.  
        // IF THE DIFFERNCE IS HIGHER THAN 4 OR W/E, YOU SPRINT WILL HAVE TO BUILD UP TO THE MAX SPEED! IT'S NOT BROKEN!
        if(Mathf.Abs(desiredMoveSpeed - lastDesireMoveSpeed) > 4f && moveSpd != 0)
        {
            StopAllCoroutines();
            StartCoroutine(SmoothlyLerpMoveSpeed());
        }
        else
        {
            moveSpd = desiredMoveSpeed;
        }
        lastDesireMoveSpeed = desiredMoveSpeed;
    }
    private IEnumerator SmoothlyLerpMoveSpeed()  // this code is changing the move speed variable to desiredMoveSpeed (over time)
    {
        // smoothly Lerp movementSPeed to desired value
        float time = 0;
        float difference = Mathf.Abs(desiredMoveSpeed - moveSpd);
        float startValue = moveSpd;

        while (time < difference)
        {
            moveSpd = Mathf.Lerp(startValue, desiredMoveSpeed, time / difference);
            if (OnSlope())
            {
                float slopeAngle = Vector3.Angle(Vector3.up, slopeHit.normal);
                float slopeAngleIncrease = 1 + (slopeAngle / 90f);

                time += Time.deltaTime * speedIncreaseMultiplier * slopeIncreaseMultiplier * slopeAngleIncrease;
            }
            else
                time += Time.deltaTime * speedIncreaseMultiplier;
            yield return null;
        }

        moveSpd = desiredMoveSpeed;
    }

    public TextMeshProUGUI text_speed;
    public TextMeshProUGUI text_ySpeed;
    public TextMeshProUGUI text_mode;
    //private bool sliding;

    private void TextStuff()
    {
        Vector3 flatVel = new Vector3(rb.velocity.x, 0f, rb.velocity.z);

        if (OnSlope())
            text_speed.SetText("Speed: " + Round(rb.velocity.magnitude, 1) + " / " + Round(moveSpd, 1));
        else
            text_speed.SetText("Speed: " + Round(flatVel.magnitude, 1) + " / " + Round(desiredMoveSpeed, 1));

        text_mode.SetText(state.ToString());
    }

    public static float Round(float value, int digits)
    {
        float mult = Mathf.Pow(10.0f, (float)digits);
        return Mathf.Round(value * mult) / mult;
    }


}




