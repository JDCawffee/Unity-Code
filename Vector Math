Learning the Math Aspect in the Game Engines.  Notes is based on Freya Holmmer; they are designed Shader Forge in Unity.  The Video Title is Vectors & Dot Product - math for Game Devs 
They will be teaching Vector Math, trigometry, Matrix.  Manuplating values.  

// Part 1 //

/// 1-Dimensional ///

With a number line, we have numbeers (intergers) in one axis with positive and negative intergers.

In Game Dev, you want to think about the humbers as a representation,not just a number.  

Vectors are directions on the axis.  Question: what is the length of a vector.  You would reposnd, the length of a vector is #. 
	// Example //
		On the single axis, 0 to 3.  The length will be 3.  NOTEED: Length / Distance are positive number. 

The direction of the vectors?  On the axis, it can be either 1 or -1.  Sometimes that is called as a sign (x).  
	NOTED: if the sign = 0.  Depending on the implications,  it can be either return 1, 0, Error. Zero has no direction.  You usually multiply the direction  SOmetimes if the sign ended up a 0, you would perhpas return it to 1.
		pure mathmatically, 0 has no direction.  

// Function // 
	Sign X = direction 
					(either -1 or 1)
To get the Lenth of a value, you want to find the absolute value.  

	abs (x) = Length / Magitude  // Length are positive number. 

If you want to know length between two value.  Function:  distance(a,b) - abs (b-a)
	What does it mean to add something.  Adding is an offset. you are moving or increase.  
	Multiple is a scale.  
		Adding and multiply is a core thing to do because you could  convert from division and subtraction to addition or multiplication if you want to. 
		a + b 				a * b
		a - b = a = (-b)		a / b = a * (1/b)

/// 2-Dimnsional ///
When we talk about dimensions, we bring up axex. 
Fun fact, the colors based on the axes is based on RGB.  Red is X, Blue = Z, Y = Green.  Also, in unity and unreal is left handed while math is usually right handed.  
	X = right, Y = Up, Z = forward. 
The point in 2D are two numbers, they are also called components. 
Vectors  kinda always orgintate from Zero because vectors doesn't have a root.  They do have a tip. (x,y).
 Function : Vector2(x,y);
Neat thing about math we can do, we can create varible while MATH can unreadable, and the notations can be confusing.  
	Exampele bold V means something, while non-bold V represent something, and cursive V means something else. On paper, it can be difficult to read.  //side tangent

When we talk about unit Vectors, they are directions. 

Normalization - The process of making a vactor normalized or the length of one is normalization.  This concept is very important. 
	The notation of a normalized vector, you will see a V with a little hat on top of it (^) that means direction.  | v | or || v || means the length.  

// Normalize//
When do you want to normalized a vector? 
	The concept of direction is really important. If you have an enemy at a vector point and the player is 0,0.  We need the direction to move towards the enemy target. 
	So if you are dleaing with physic for an example, you want to add the vector to move toweards the enemy. 
	You usually want to move at a fixed rate in terms of speed.  WHat we usually do then is you normalized the vector between the player and enmy then you have a normalized vector, which that's a direction.
	Then once we have a normalized vector if you multipoy a number by your speed or value represent how much we want to move that direction, we are gurantee that going to be in distance per second  or 
	that disncace is going to be in a meters because the legnth is one.  That means we get consistent movement in space.  
	If we multiply a vector with a scaler as in a single value, we will be getting a direction along with length of whatever the value you are multiply with.  Imagine you multiply vector 3,2 by 2.  You get the end value
	that would have a differnet length vs normalized vector multiply a distance value.   
		(3,2) * 2 = (6,4) vs Normalized vector  (1,1) * 2 = (2,2)  The same length.  It will keep the scarler value from the normalized vector.  
		NO matter what vector location we are at in World.Space.  When we interact with the physics, we will have consistance push, pull, gravity, etc interaction.  
		If we don't normalized the vector, our objects would have different results/behavior. 
Freya shows an example for normalized results in unity at 1:17:44.  Neat thing to note, there is a function called "Gizmos".DrawLine".

In the context of C# and Unity, "normalized" typically refers to the process of scaling a vector to have a length (magnitude) of 1. This is done to make vector math and calculations more predictable and consistent. When a vector is normalized, it still points in the same direction as the original vector but has a length of 1.

In Unity, you can normalize a vector by using the normalized property of the Vector3 or Vector2 struct, depending on whether you're working in 3D or 2D space. 
For example:
Vecotr3 originalVector = new Vector3(2.0f, 0.0f, 2.0f);
Vector3 normalizedVector = originalVector.normalized;
// normalizedVector will have a length of 1 whiel still pointing int he same direction. 

Normalization is often used in various game development scenarios, such as when working with movement and direction vectors, physics calculations, or lighting calculations. 
It can simplify calculations and ensure that the direction information is the primary focus without worrying about the magnitude of the vector.

// Length //
If you know how to get the lgenth of the hypotenuse then we know how to get the length of the Vector.  Pythagorean Theorem = square root √ x power of 2 + y power of 2  (you can add more components).  This is the hypotenuse of a right angle triangle. 
Vector is -2, 3.  √ -2 * -2 + 3 * 3.  
√ 4 + 9 
√ 13 approximate equal to  3.6 (our full length of our vector!) abs(x) = Length/Magitude.   abs(3.6) = Length/Magitude. 
	Function
		float = length = pt.magitude;  
	Sometimes this can be useful.  
Let's find the distance from -2, 3. Another vector for the this example will be 3,2.   A = -2, 3.  V = 3,2   REMBEMBER: distance (a,b) = abs(b-a)
	Function: 
		Vector2.Distance (a,b);
	or	(a-b).magitude
	or	sqrt(a.x-b.x)^2+(a.y-b.y)^2 
Neat fucntion, you can draw lines in Unity

/// Dot Product /// 
Dot product a * b
Cross Dot Product a x b

We have 2 vectors. What is the dot product between vectors.  In math Library dot(a,b)
THe result of the dot product is not a vector but a numerical value.  
There are some cavent.  In order to work, we required 1 or both vector point be normalized. A has to be length of 1. It will not work out if none of them are normalized, then it doesn't really projecct. 
You can change the length with B.  It doesn't matter which direction you do, you will get the same result.
Dot Product can be negative. It is misleading to call it a distance.  
NOTE: if both of your vectors are normalized and it's pointing the same direction. The value will be 1. 
	Perpedicular = 0
	opposite direction = -1 
	Depending on the direction it can go between ~ .99 to ~ -.99 

	The dot product, also known as the scalar product, is an operation in vector mathematics that takes two vectors and returns a single scalar (a real number). 
	It's used to measure the cosine of the angle between two vectors and provides information about their alignment. 
	The dot product is denoted by a dot (·) or sometimes by simply multiplying two vectors without any operator between them. 

For two vectors A and B, the dot product is represented as:

A · B

Mathematically, the dot product of two vectors A and B is calculated as:

A · B = |A| * |B| * cos(θ)

Fron the video: dot(a,b) = a.x * b.x + a.y * b.y

Where:
- A and B are the two vectors.
- |A| and |B| represent the magnitudes (lengths) of the vectors A and B, respectively.
- θ is the angle between the vectors A and B.

The dot product has several important properties and applications, including:
1. Finding the angle between two vectors: You can use the dot product formula to calculate the cosine of the angle between two vectors and then use inverse trigonometric functions to find the angle itself.
2. Determining the projection of one vector onto another: The dot product is used to find the component of one vector in the direction of another vector. This is useful in various physics and engineering applications.
3. Testing for orthogonality: Two vectors are orthogonal (perpendicular) to each other if their dot product is zero. This property is used in linear algebra and geometry.
4. Calculating work done: In physics, the dot product can be used to calculate the work done by a force when it acts on an object, considering both the direction of the force and the direction of motion.
The dot product is a fundamental concept in vector mathematics and has wide-ranging applications in physics, computer graphics, engineering, and many other fields.
