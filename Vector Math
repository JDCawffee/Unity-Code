Learning the Math Aspect in the Game Engines.  Notes is based on Freya Holmmer; they are designed Shader Forge in Unity.  The Video Title is Vectors & Dot Product - math for Game Devs 
They will be teaching Vector Math, trigometry, Matrix.  Manuplating values.  

// Part 1 //

/// 1-Dimensional ///

With a number line, we have numbeers (intergers) in one axis with positive and negative intergers.

In Game Dev, you want to think about the humbers as a representation,not just a number.  

Vectors are directions on the axis.  Question: what is the length of a vector.  You would reposnd, the length of a vector is #. 
	// Example //
		On the single axis, 0 to 3.  The length will be 3.  NOTEED: Length / Distance are positive number. 

The direction of the vectors?  On the axis, it can be either 1 or -1.  Sometimes that is called as a sign (x).  
	NOTED: if the sign = 0.  Depending on the implications,  it can be either return 1, 0, Error. Zero has no direction.  You usually multiply the direction  SOmetimes if the sign ended up a 0, you would perhpas return it to 1.
		pure mathmatically, 0 has no direction.  

// Function // 
	Sign X = direction 
					(either -1 or 1)
To get the Lenth of a value, you want to find the absolute value.  

	abs (x) = Length / Magitude  // Length are positive number. 

If you want to know length between two value.  Function:  distance(a,b) - abs (b-a)
	What does it mean to add something.  Adding is an offset. you are moving or increase.  
	Multiple is a scale.  
		Adding and multiply is a core thing to do because you could  convert from division and subtraction to addition or multiplication if you want to. 
		a + b 				a * b
		a - b = a = (-b)		a / b = a * (1/b)

/// 2-Dimnsional ///
When we talk about dimensions, we bring up axex. 
Fun fact, the colors based on the axes is based on RGB.  Red is X, Blue = Z, Y = Green.  Also, in unity and unreal is left handed while math is usually right handed.  
	X = right, Y = Up, Z = forward. 
The point in 2D are two numbers, they are also called components. 
Vectors  kinda always orgintate from Zero because vectors doesn't have a root.  They do have a tip. (x,y).
 Function : Vector2(x,y);
Neat thing about math we can do, we can create varible while MATH can unreadable, and the notations can be confusing.  
	Exampele bold V means something, while non-bold V represent something, and cursive V means something else. On paper, it can be difficult to read.  //side tangent

When we talk about unit Vectors, they are directions. 

Normalization - The process of making a vactor normalized or the length of one is normalization.  This concept is very important. 
	The notation of a normalized vector, you will see a V with a little hat on top of it (^) that means direction.  | v | or || v || means the length.  

// Normalize//
When do you want to normalized a vector? 
	The concept of direction is really important. If you have an enemy at a vector point and the player is 0,0.  We need the direction to move towards the enemy target. 
	So if you are dleaing with physic for an example, you want to add the vector to move toweards the enemy. 
	You usually want to move at a fixed rate in terms of speed.  WHat we usually do then is you normalized the vector between the player and enmy then you have a normalized vector, which that's a direction.
	Then once we have a normalized vector if you multipoy a number by your speed or value represent how much we want to move that direction, we are gurantee that going to be in distance per second  or 
	that disncace is going to be in a meters because the legnth is one.  That means we get consistent movement in space.  
	If we multiply a vector with a scaler as in a single value, we will be getting a direction along with length of whatever the value you are multiply with.  Imagine you multiply vector 3,2 by 2.  You get the end value
	that would have a differnet length vs normalized vector multiply a distance value.   
		(3,2) * 2 = (6,4) vs Normalized vector  (1,1) * 2 = (2,2)  The same length.  It will keep the scarler value from the normalized vector.  
		NO matter what vector location we are at in World.Space.  When we interact with the physics, we will have consistance push, pull, gravity, etc interaction.  
		If we don't normalized the vector, our objects would have different results/behavior. 
Freya shows an example for normalized results in unity at 1:17:44.  Neat thing to note, there is a function called "Gizmos".DrawLine".

// Length //
If you know how to get the lgenth of the hypotenuse then we know how to get the length of the Vector.  Pythagorean Theorem = square root √ x power of 2 + y power of 2  (you can add more components).  This is the hypotenuse of a right angle triangle. 
Vector is -2, 3.  √ -2 * -2 + 3 * 3.  
√ 4 + 9 
√ 13 approximate equal to  3.6 (our full length of our vector!) abs(x) = Length/Magitude.   abs(3.6) = Length/Magitude. 
	Function
		float = length = pt.magitude;  
	Sometimes this can be useful.  
Let's find the distance from -2, 3. Another vector for the this example will be 3,2.   A = -2, 3.  V = 3,2   REMBEMBER: distance (a,b) = abs(b-a)
	Function: 
		Vector2.Distance (a,b);
	or	(a-b).magitude
	or	sqrt(a.x-b.x)^2+(a.y-b.y)^2
	 
	
